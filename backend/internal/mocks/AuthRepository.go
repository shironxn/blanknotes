// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/shironxn/blanknotes/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

type AuthRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthRepository) EXPECT() *AuthRepository_Expecter {
	return &AuthRepository_Expecter{mock: &_m.Mock}
}

// DeleteRefreshToken provides a mock function with given fields: entity
func (_m *AuthRepository) DeleteRefreshToken(entity domain.RefreshToken) error {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.RefreshToken) error); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthRepository_DeleteRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRefreshToken'
type AuthRepository_DeleteRefreshToken_Call struct {
	*mock.Call
}

// DeleteRefreshToken is a helper method to define mock.On call
//   - entity domain.RefreshToken
func (_e *AuthRepository_Expecter) DeleteRefreshToken(entity interface{}) *AuthRepository_DeleteRefreshToken_Call {
	return &AuthRepository_DeleteRefreshToken_Call{Call: _e.mock.On("DeleteRefreshToken", entity)}
}

func (_c *AuthRepository_DeleteRefreshToken_Call) Run(run func(entity domain.RefreshToken)) *AuthRepository_DeleteRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.RefreshToken))
	})
	return _c
}

func (_c *AuthRepository_DeleteRefreshToken_Call) Return(_a0 error) *AuthRepository_DeleteRefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthRepository_DeleteRefreshToken_Call) RunAndReturn(run func(domain.RefreshToken) error) *AuthRepository_DeleteRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: email
func (_m *AuthRepository) GetByEmail(email string) (*domain.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthRepository_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type AuthRepository_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - email string
func (_e *AuthRepository_Expecter) GetByEmail(email interface{}) *AuthRepository_GetByEmail_Call {
	return &AuthRepository_GetByEmail_Call{Call: _e.mock.On("GetByEmail", email)}
}

func (_c *AuthRepository_GetByEmail_Call) Run(run func(email string)) *AuthRepository_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AuthRepository_GetByEmail_Call) Return(_a0 *domain.User, _a1 error) *AuthRepository_GetByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthRepository_GetByEmail_Call) RunAndReturn(run func(string) (*domain.User, error)) *AuthRepository_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefreshToken provides a mock function with given fields: userID
func (_m *AuthRepository) GetRefreshToken(userID uint) (*domain.RefreshToken, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetRefreshToken")
	}

	var r0 *domain.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.RefreshToken, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.RefreshToken); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.RefreshToken)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthRepository_GetRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefreshToken'
type AuthRepository_GetRefreshToken_Call struct {
	*mock.Call
}

// GetRefreshToken is a helper method to define mock.On call
//   - userID uint
func (_e *AuthRepository_Expecter) GetRefreshToken(userID interface{}) *AuthRepository_GetRefreshToken_Call {
	return &AuthRepository_GetRefreshToken_Call{Call: _e.mock.On("GetRefreshToken", userID)}
}

func (_c *AuthRepository_GetRefreshToken_Call) Run(run func(userID uint)) *AuthRepository_GetRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *AuthRepository_GetRefreshToken_Call) Return(_a0 *domain.RefreshToken, _a1 error) *AuthRepository_GetRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthRepository_GetRefreshToken_Call) RunAndReturn(run func(uint) (*domain.RefreshToken, error)) *AuthRepository_GetRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: req
func (_m *AuthRepository) Register(req domain.AuthRegisterRequest) (*domain.User, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.AuthRegisterRequest) (*domain.User, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(domain.AuthRegisterRequest) *domain.User); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.AuthRegisterRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthRepository_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type AuthRepository_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - req domain.AuthRegisterRequest
func (_e *AuthRepository_Expecter) Register(req interface{}) *AuthRepository_Register_Call {
	return &AuthRepository_Register_Call{Call: _e.mock.On("Register", req)}
}

func (_c *AuthRepository_Register_Call) Run(run func(req domain.AuthRegisterRequest)) *AuthRepository_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.AuthRegisterRequest))
	})
	return _c
}

func (_c *AuthRepository_Register_Call) Return(_a0 *domain.User, _a1 error) *AuthRepository_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthRepository_Register_Call) RunAndReturn(run func(domain.AuthRegisterRequest) (*domain.User, error)) *AuthRepository_Register_Call {
	_c.Call.Return(run)
	return _c
}

// StoreRefreshToken provides a mock function with given fields: userID, token
func (_m *AuthRepository) StoreRefreshToken(userID uint, token string) error {
	ret := _m.Called(userID, token)

	if len(ret) == 0 {
		panic("no return value specified for StoreRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string) error); ok {
		r0 = rf(userID, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthRepository_StoreRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreRefreshToken'
type AuthRepository_StoreRefreshToken_Call struct {
	*mock.Call
}

// StoreRefreshToken is a helper method to define mock.On call
//   - userID uint
//   - token string
func (_e *AuthRepository_Expecter) StoreRefreshToken(userID interface{}, token interface{}) *AuthRepository_StoreRefreshToken_Call {
	return &AuthRepository_StoreRefreshToken_Call{Call: _e.mock.On("StoreRefreshToken", userID, token)}
}

func (_c *AuthRepository_StoreRefreshToken_Call) Run(run func(userID uint, token string)) *AuthRepository_StoreRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(string))
	})
	return _c
}

func (_c *AuthRepository_StoreRefreshToken_Call) Return(_a0 error) *AuthRepository_StoreRefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthRepository_StoreRefreshToken_Call) RunAndReturn(run func(uint, string) error) *AuthRepository_StoreRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
