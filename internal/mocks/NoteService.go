// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	domain "gocrud/internal/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// NoteService is an autogenerated mock type for the NoteService type
type NoteService struct {
	mock.Mock
}

type NoteService_Expecter struct {
	mock *mock.Mock
}

func (_m *NoteService) EXPECT() *NoteService_Expecter {
	return &NoteService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: req
func (_m *NoteService) Create(req domain.NoteRequest) (*domain.Note, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.NoteRequest) (*domain.Note, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(domain.NoteRequest) *domain.Note); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.NoteRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NoteService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type NoteService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - req domain.NoteRequest
func (_e *NoteService_Expecter) Create(req interface{}) *NoteService_Create_Call {
	return &NoteService_Create_Call{Call: _e.mock.On("Create", req)}
}

func (_c *NoteService_Create_Call) Run(run func(req domain.NoteRequest)) *NoteService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.NoteRequest))
	})
	return _c
}

func (_c *NoteService_Create_Call) Return(_a0 *domain.Note, _a1 error) *NoteService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NoteService_Create_Call) RunAndReturn(run func(domain.NoteRequest) (*domain.Note, error)) *NoteService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: req, claims
func (_m *NoteService) Delete(req domain.NoteRequest, claims domain.Claims) error {
	ret := _m.Called(req, claims)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.NoteRequest, domain.Claims) error); ok {
		r0 = rf(req, claims)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NoteService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type NoteService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - req domain.NoteRequest
//   - claims domain.Claims
func (_e *NoteService_Expecter) Delete(req interface{}, claims interface{}) *NoteService_Delete_Call {
	return &NoteService_Delete_Call{Call: _e.mock.On("Delete", req, claims)}
}

func (_c *NoteService_Delete_Call) Run(run func(req domain.NoteRequest, claims domain.Claims)) *NoteService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.NoteRequest), args[1].(domain.Claims))
	})
	return _c
}

func (_c *NoteService_Delete_Call) Return(_a0 error) *NoteService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NoteService_Delete_Call) RunAndReturn(run func(domain.NoteRequest, domain.Claims) error) *NoteService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *NoteService) GetAll() ([]domain.Note, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []domain.Note
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Note, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Note); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Note)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NoteService_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type NoteService_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *NoteService_Expecter) GetAll() *NoteService_GetAll_Call {
	return &NoteService_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *NoteService_GetAll_Call) Run(run func()) *NoteService_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NoteService_GetAll_Call) Return(_a0 []domain.Note, _a1 error) *NoteService_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NoteService_GetAll_Call) RunAndReturn(run func() ([]domain.Note, error)) *NoteService_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: req
func (_m *NoteService) GetByID(req domain.NoteRequest) (*domain.Note, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.NoteRequest) (*domain.Note, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(domain.NoteRequest) *domain.Note); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.NoteRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NoteService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type NoteService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - req domain.NoteRequest
func (_e *NoteService_Expecter) GetByID(req interface{}) *NoteService_GetByID_Call {
	return &NoteService_GetByID_Call{Call: _e.mock.On("GetByID", req)}
}

func (_c *NoteService_GetByID_Call) Run(run func(req domain.NoteRequest)) *NoteService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.NoteRequest))
	})
	return _c
}

func (_c *NoteService_GetByID_Call) Return(_a0 *domain.Note, _a1 error) *NoteService_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NoteService_GetByID_Call) RunAndReturn(run func(domain.NoteRequest) (*domain.Note, error)) *NoteService_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: req, claims
func (_m *NoteService) Update(req domain.NoteRequest, claims domain.Claims) (*domain.Note, error) {
	ret := _m.Called(req, claims)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.NoteRequest, domain.Claims) (*domain.Note, error)); ok {
		return rf(req, claims)
	}
	if rf, ok := ret.Get(0).(func(domain.NoteRequest, domain.Claims) *domain.Note); ok {
		r0 = rf(req, claims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.NoteRequest, domain.Claims) error); ok {
		r1 = rf(req, claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NoteService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type NoteService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - req domain.NoteRequest
//   - claims domain.Claims
func (_e *NoteService_Expecter) Update(req interface{}, claims interface{}) *NoteService_Update_Call {
	return &NoteService_Update_Call{Call: _e.mock.On("Update", req, claims)}
}

func (_c *NoteService_Update_Call) Run(run func(req domain.NoteRequest, claims domain.Claims)) *NoteService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.NoteRequest), args[1].(domain.Claims))
	})
	return _c
}

func (_c *NoteService_Update_Call) Return(_a0 *domain.Note, _a1 error) *NoteService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NoteService_Update_Call) RunAndReturn(run func(domain.NoteRequest, domain.Claims) (*domain.Note, error)) *NoteService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewNoteService creates a new instance of NoteService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNoteService(t interface {
	mock.TestingT
	Cleanup(func())
}) *NoteService {
	mock := &NoteService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
