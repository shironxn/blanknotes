// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/shironxn/gocrud/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// NoteRepository is an autogenerated mock type for the NoteRepository type
type NoteRepository struct {
	mock.Mock
}

type NoteRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *NoteRepository) EXPECT() *NoteRepository_Expecter {
	return &NoteRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: req
func (_m *NoteRepository) Create(req domain.NoteRequest) (*domain.Note, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.NoteRequest) (*domain.Note, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(domain.NoteRequest) *domain.Note); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.NoteRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NoteRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type NoteRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - req domain.NoteRequest
func (_e *NoteRepository_Expecter) Create(req interface{}) *NoteRepository_Create_Call {
	return &NoteRepository_Create_Call{Call: _e.mock.On("Create", req)}
}

func (_c *NoteRepository_Create_Call) Run(run func(req domain.NoteRequest)) *NoteRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.NoteRequest))
	})
	return _c
}

func (_c *NoteRepository_Create_Call) Return(_a0 *domain.Note, _a1 error) *NoteRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NoteRepository_Create_Call) RunAndReturn(run func(domain.NoteRequest) (*domain.Note, error)) *NoteRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: entity
func (_m *NoteRepository) Delete(entity *domain.Note) error {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Note) error); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NoteRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type NoteRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - entity *domain.Note
func (_e *NoteRepository_Expecter) Delete(entity interface{}) *NoteRepository_Delete_Call {
	return &NoteRepository_Delete_Call{Call: _e.mock.On("Delete", entity)}
}

func (_c *NoteRepository_Delete_Call) Run(run func(entity *domain.Note)) *NoteRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Note))
	})
	return _c
}

func (_c *NoteRepository_Delete_Call) Return(_a0 error) *NoteRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NoteRepository_Delete_Call) RunAndReturn(run func(*domain.Note) error) *NoteRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: req, metdata
func (_m *NoteRepository) GetAll(req domain.NoteQuery, metdata *domain.Metadata) ([]domain.Note, error) {
	ret := _m.Called(req, metdata)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []domain.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.NoteQuery, *domain.Metadata) ([]domain.Note, error)); ok {
		return rf(req, metdata)
	}
	if rf, ok := ret.Get(0).(func(domain.NoteQuery, *domain.Metadata) []domain.Note); ok {
		r0 = rf(req, metdata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.NoteQuery, *domain.Metadata) error); ok {
		r1 = rf(req, metdata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NoteRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type NoteRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - req domain.NoteQuery
//   - metdata *domain.Metadata
func (_e *NoteRepository_Expecter) GetAll(req interface{}, metdata interface{}) *NoteRepository_GetAll_Call {
	return &NoteRepository_GetAll_Call{Call: _e.mock.On("GetAll", req, metdata)}
}

func (_c *NoteRepository_GetAll_Call) Run(run func(req domain.NoteQuery, metdata *domain.Metadata)) *NoteRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.NoteQuery), args[1].(*domain.Metadata))
	})
	return _c
}

func (_c *NoteRepository_GetAll_Call) Return(_a0 []domain.Note, _a1 error) *NoteRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NoteRepository_GetAll_Call) RunAndReturn(run func(domain.NoteQuery, *domain.Metadata) ([]domain.Note, error)) *NoteRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: req
func (_m *NoteRepository) GetByID(req domain.NoteRequest) (*domain.Note, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.NoteRequest) (*domain.Note, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(domain.NoteRequest) *domain.Note); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.NoteRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NoteRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type NoteRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - req domain.NoteRequest
func (_e *NoteRepository_Expecter) GetByID(req interface{}) *NoteRepository_GetByID_Call {
	return &NoteRepository_GetByID_Call{Call: _e.mock.On("GetByID", req)}
}

func (_c *NoteRepository_GetByID_Call) Run(run func(req domain.NoteRequest)) *NoteRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.NoteRequest))
	})
	return _c
}

func (_c *NoteRepository_GetByID_Call) Return(_a0 *domain.Note, _a1 error) *NoteRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NoteRepository_GetByID_Call) RunAndReturn(run func(domain.NoteRequest) (*domain.Note, error)) *NoteRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: req, entity
func (_m *NoteRepository) Update(req domain.NoteRequest, entity *domain.Note) (*domain.Note, error) {
	ret := _m.Called(req, entity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.NoteRequest, *domain.Note) (*domain.Note, error)); ok {
		return rf(req, entity)
	}
	if rf, ok := ret.Get(0).(func(domain.NoteRequest, *domain.Note) *domain.Note); ok {
		r0 = rf(req, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.NoteRequest, *domain.Note) error); ok {
		r1 = rf(req, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NoteRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type NoteRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - req domain.NoteRequest
//   - entity *domain.Note
func (_e *NoteRepository_Expecter) Update(req interface{}, entity interface{}) *NoteRepository_Update_Call {
	return &NoteRepository_Update_Call{Call: _e.mock.On("Update", req, entity)}
}

func (_c *NoteRepository_Update_Call) Run(run func(req domain.NoteRequest, entity *domain.Note)) *NoteRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.NoteRequest), args[1].(*domain.Note))
	})
	return _c
}

func (_c *NoteRepository_Update_Call) Return(_a0 *domain.Note, _a1 error) *NoteRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NoteRepository_Update_Call) RunAndReturn(run func(domain.NoteRequest, *domain.Note) (*domain.Note, error)) *NoteRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewNoteRepository creates a new instance of NoteRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNoteRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NoteRepository {
	mock := &NoteRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
