// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/shironxn/blanknotes/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

type AuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthService) EXPECT() *AuthService_Expecter {
	return &AuthService_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: req
func (_m *AuthService) Login(req domain.AuthLoginRequest) (*domain.User, *domain.UserToken, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *domain.User
	var r1 *domain.UserToken
	var r2 error
	if rf, ok := ret.Get(0).(func(domain.AuthLoginRequest) (*domain.User, *domain.UserToken, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(domain.AuthLoginRequest) *domain.User); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.AuthLoginRequest) *domain.UserToken); ok {
		r1 = rf(req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.UserToken)
		}
	}

	if rf, ok := ret.Get(2).(func(domain.AuthLoginRequest) error); ok {
		r2 = rf(req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AuthService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type AuthService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - req domain.AuthLoginRequest
func (_e *AuthService_Expecter) Login(req interface{}) *AuthService_Login_Call {
	return &AuthService_Login_Call{Call: _e.mock.On("Login", req)}
}

func (_c *AuthService_Login_Call) Run(run func(req domain.AuthLoginRequest)) *AuthService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.AuthLoginRequest))
	})
	return _c
}

func (_c *AuthService_Login_Call) Return(_a0 *domain.User, _a1 *domain.UserToken, _a2 error) *AuthService_Login_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AuthService_Login_Call) RunAndReturn(run func(domain.AuthLoginRequest) (*domain.User, *domain.UserToken, error)) *AuthService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: userID
func (_m *AuthService) Logout(userID uint) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthService_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type AuthService_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - userID uint
func (_e *AuthService_Expecter) Logout(userID interface{}) *AuthService_Logout_Call {
	return &AuthService_Logout_Call{Call: _e.mock.On("Logout", userID)}
}

func (_c *AuthService_Logout_Call) Run(run func(userID uint)) *AuthService_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *AuthService_Logout_Call) Return(_a0 error) *AuthService_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthService_Logout_Call) RunAndReturn(run func(uint) error) *AuthService_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function with given fields: token
func (_m *AuthService) Refresh(token string) (*string, *domain.Claims, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 *string
	var r1 *domain.Claims
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*string, *domain.Claims, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *string); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *domain.Claims); ok {
		r1 = rf(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.Claims)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(token)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AuthService_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type AuthService_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - token string
func (_e *AuthService_Expecter) Refresh(token interface{}) *AuthService_Refresh_Call {
	return &AuthService_Refresh_Call{Call: _e.mock.On("Refresh", token)}
}

func (_c *AuthService_Refresh_Call) Run(run func(token string)) *AuthService_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AuthService_Refresh_Call) Return(_a0 *string, _a1 *domain.Claims, _a2 error) *AuthService_Refresh_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AuthService_Refresh_Call) RunAndReturn(run func(string) (*string, *domain.Claims, error)) *AuthService_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: req
func (_m *AuthService) Register(req domain.AuthRegisterRequest) (*domain.User, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.AuthRegisterRequest) (*domain.User, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(domain.AuthRegisterRequest) *domain.User); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.AuthRegisterRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type AuthService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - req domain.AuthRegisterRequest
func (_e *AuthService_Expecter) Register(req interface{}) *AuthService_Register_Call {
	return &AuthService_Register_Call{Call: _e.mock.On("Register", req)}
}

func (_c *AuthService_Register_Call) Run(run func(req domain.AuthRegisterRequest)) *AuthService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.AuthRegisterRequest))
	})
	return _c
}

func (_c *AuthService_Register_Call) Return(_a0 *domain.User, _a1 error) *AuthService_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthService_Register_Call) RunAndReturn(run func(domain.AuthRegisterRequest) (*domain.User, error)) *AuthService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
