// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	fiber "github.com/gofiber/fiber/v2"
	mock "github.com/stretchr/testify/mock"
)

// NoteHandler is an autogenerated mock type for the NoteHandler type
type NoteHandler struct {
	mock.Mock
}

type NoteHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *NoteHandler) EXPECT() *NoteHandler_Expecter {
	return &NoteHandler_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx
func (_m *NoteHandler) Create(ctx *fiber.Ctx) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NoteHandler_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type NoteHandler_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx *fiber.Ctx
func (_e *NoteHandler_Expecter) Create(ctx interface{}) *NoteHandler_Create_Call {
	return &NoteHandler_Create_Call{Call: _e.mock.On("Create", ctx)}
}

func (_c *NoteHandler_Create_Call) Run(run func(ctx *fiber.Ctx)) *NoteHandler_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *NoteHandler_Create_Call) Return(_a0 error) *NoteHandler_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NoteHandler_Create_Call) RunAndReturn(run func(*fiber.Ctx) error) *NoteHandler_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx
func (_m *NoteHandler) Delete(ctx *fiber.Ctx) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NoteHandler_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type NoteHandler_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx *fiber.Ctx
func (_e *NoteHandler_Expecter) Delete(ctx interface{}) *NoteHandler_Delete_Call {
	return &NoteHandler_Delete_Call{Call: _e.mock.On("Delete", ctx)}
}

func (_c *NoteHandler_Delete_Call) Run(run func(ctx *fiber.Ctx)) *NoteHandler_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *NoteHandler_Delete_Call) Return(_a0 error) *NoteHandler_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NoteHandler_Delete_Call) RunAndReturn(run func(*fiber.Ctx) error) *NoteHandler_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx
func (_m *NoteHandler) GetAll(ctx *fiber.Ctx) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NoteHandler_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type NoteHandler_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx *fiber.Ctx
func (_e *NoteHandler_Expecter) GetAll(ctx interface{}) *NoteHandler_GetAll_Call {
	return &NoteHandler_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *NoteHandler_GetAll_Call) Run(run func(ctx *fiber.Ctx)) *NoteHandler_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *NoteHandler_GetAll_Call) Return(_a0 error) *NoteHandler_GetAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NoteHandler_GetAll_Call) RunAndReturn(run func(*fiber.Ctx) error) *NoteHandler_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx
func (_m *NoteHandler) GetByID(ctx *fiber.Ctx) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NoteHandler_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type NoteHandler_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx *fiber.Ctx
func (_e *NoteHandler_Expecter) GetByID(ctx interface{}) *NoteHandler_GetByID_Call {
	return &NoteHandler_GetByID_Call{Call: _e.mock.On("GetByID", ctx)}
}

func (_c *NoteHandler_GetByID_Call) Run(run func(ctx *fiber.Ctx)) *NoteHandler_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *NoteHandler_GetByID_Call) Return(_a0 error) *NoteHandler_GetByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NoteHandler_GetByID_Call) RunAndReturn(run func(*fiber.Ctx) error) *NoteHandler_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx
func (_m *NoteHandler) Update(ctx *fiber.Ctx) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NoteHandler_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type NoteHandler_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx *fiber.Ctx
func (_e *NoteHandler_Expecter) Update(ctx interface{}) *NoteHandler_Update_Call {
	return &NoteHandler_Update_Call{Call: _e.mock.On("Update", ctx)}
}

func (_c *NoteHandler_Update_Call) Run(run func(ctx *fiber.Ctx)) *NoteHandler_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *NoteHandler_Update_Call) Return(_a0 error) *NoteHandler_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NoteHandler_Update_Call) RunAndReturn(run func(*fiber.Ctx) error) *NoteHandler_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewNoteHandler creates a new instance of NoteHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNoteHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *NoteHandler {
	mock := &NoteHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
