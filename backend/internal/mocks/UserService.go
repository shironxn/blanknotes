// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/shironxn/blanknotes/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: req, claims
func (_m *UserService) Delete(req domain.UserRequest, claims domain.Claims) error {
	ret := _m.Called(req, claims)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.UserRequest, domain.Claims) error); ok {
		r0 = rf(req, claims)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type UserService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - req domain.UserRequest
//   - claims domain.Claims
func (_e *UserService_Expecter) Delete(req interface{}, claims interface{}) *UserService_Delete_Call {
	return &UserService_Delete_Call{Call: _e.mock.On("Delete", req, claims)}
}

func (_c *UserService_Delete_Call) Run(run func(req domain.UserRequest, claims domain.Claims)) *UserService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.UserRequest), args[1].(domain.Claims))
	})
	return _c
}

func (_c *UserService_Delete_Call) Return(_a0 error) *UserService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_Delete_Call) RunAndReturn(run func(domain.UserRequest, domain.Claims) error) *UserService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: req, metdata
func (_m *UserService) GetAll(req domain.UserQuery, metdata *domain.Metadata) ([]domain.User, error) {
	ret := _m.Called(req, metdata)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.UserQuery, *domain.Metadata) ([]domain.User, error)); ok {
		return rf(req, metdata)
	}
	if rf, ok := ret.Get(0).(func(domain.UserQuery, *domain.Metadata) []domain.User); ok {
		r0 = rf(req, metdata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.UserQuery, *domain.Metadata) error); ok {
		r1 = rf(req, metdata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type UserService_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - req domain.UserQuery
//   - metdata *domain.Metadata
func (_e *UserService_Expecter) GetAll(req interface{}, metdata interface{}) *UserService_GetAll_Call {
	return &UserService_GetAll_Call{Call: _e.mock.On("GetAll", req, metdata)}
}

func (_c *UserService_GetAll_Call) Run(run func(req domain.UserQuery, metdata *domain.Metadata)) *UserService_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.UserQuery), args[1].(*domain.Metadata))
	})
	return _c
}

func (_c *UserService_GetAll_Call) Return(_a0 []domain.User, _a1 error) *UserService_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetAll_Call) RunAndReturn(run func(domain.UserQuery, *domain.Metadata) ([]domain.User, error)) *UserService_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: id
func (_m *UserService) GetByID(id uint) (*domain.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type UserService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id uint
func (_e *UserService_Expecter) GetByID(id interface{}) *UserService_GetByID_Call {
	return &UserService_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *UserService_GetByID_Call) Run(run func(id uint)) *UserService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *UserService_GetByID_Call) Return(_a0 *domain.User, _a1 error) *UserService_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetByID_Call) RunAndReturn(run func(uint) (*domain.User, error)) *UserService_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: req, claims
func (_m *UserService) Update(req domain.UserRequest, claims domain.Claims) (*domain.User, error) {
	ret := _m.Called(req, claims)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.UserRequest, domain.Claims) (*domain.User, error)); ok {
		return rf(req, claims)
	}
	if rf, ok := ret.Get(0).(func(domain.UserRequest, domain.Claims) *domain.User); ok {
		r0 = rf(req, claims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.UserRequest, domain.Claims) error); ok {
		r1 = rf(req, claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type UserService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - req domain.UserRequest
//   - claims domain.Claims
func (_e *UserService_Expecter) Update(req interface{}, claims interface{}) *UserService_Update_Call {
	return &UserService_Update_Call{Call: _e.mock.On("Update", req, claims)}
}

func (_c *UserService_Update_Call) Run(run func(req domain.UserRequest, claims domain.Claims)) *UserService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.UserRequest), args[1].(domain.Claims))
	})
	return _c
}

func (_c *UserService_Update_Call) Return(_a0 *domain.User, _a1 error) *UserService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_Update_Call) RunAndReturn(run func(domain.UserRequest, domain.Claims) (*domain.User, error)) *UserService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
