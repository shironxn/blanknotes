// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	fiber "github.com/gofiber/fiber/v2"
	mock "github.com/stretchr/testify/mock"
)

// AuthHandler is an autogenerated mock type for the AuthHandler type
type AuthHandler struct {
	mock.Mock
}

type AuthHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthHandler) EXPECT() *AuthHandler_Expecter {
	return &AuthHandler_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx
func (_m *AuthHandler) Login(ctx *fiber.Ctx) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthHandler_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type AuthHandler_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx *fiber.Ctx
func (_e *AuthHandler_Expecter) Login(ctx interface{}) *AuthHandler_Login_Call {
	return &AuthHandler_Login_Call{Call: _e.mock.On("Login", ctx)}
}

func (_c *AuthHandler_Login_Call) Run(run func(ctx *fiber.Ctx)) *AuthHandler_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *AuthHandler_Login_Call) Return(_a0 error) *AuthHandler_Login_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthHandler_Login_Call) RunAndReturn(run func(*fiber.Ctx) error) *AuthHandler_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: ctx
func (_m *AuthHandler) Logout(ctx *fiber.Ctx) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthHandler_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type AuthHandler_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx *fiber.Ctx
func (_e *AuthHandler_Expecter) Logout(ctx interface{}) *AuthHandler_Logout_Call {
	return &AuthHandler_Logout_Call{Call: _e.mock.On("Logout", ctx)}
}

func (_c *AuthHandler_Logout_Call) Run(run func(ctx *fiber.Ctx)) *AuthHandler_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *AuthHandler_Logout_Call) Return(_a0 error) *AuthHandler_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthHandler_Logout_Call) RunAndReturn(run func(*fiber.Ctx) error) *AuthHandler_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function with given fields: ctx
func (_m *AuthHandler) Refresh(ctx *fiber.Ctx) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthHandler_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type AuthHandler_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - ctx *fiber.Ctx
func (_e *AuthHandler_Expecter) Refresh(ctx interface{}) *AuthHandler_Refresh_Call {
	return &AuthHandler_Refresh_Call{Call: _e.mock.On("Refresh", ctx)}
}

func (_c *AuthHandler_Refresh_Call) Run(run func(ctx *fiber.Ctx)) *AuthHandler_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *AuthHandler_Refresh_Call) Return(_a0 error) *AuthHandler_Refresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthHandler_Refresh_Call) RunAndReturn(run func(*fiber.Ctx) error) *AuthHandler_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx
func (_m *AuthHandler) Register(ctx *fiber.Ctx) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthHandler_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type AuthHandler_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx *fiber.Ctx
func (_e *AuthHandler_Expecter) Register(ctx interface{}) *AuthHandler_Register_Call {
	return &AuthHandler_Register_Call{Call: _e.mock.On("Register", ctx)}
}

func (_c *AuthHandler_Register_Call) Run(run func(ctx *fiber.Ctx)) *AuthHandler_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *AuthHandler_Register_Call) Return(_a0 error) *AuthHandler_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthHandler_Register_Call) RunAndReturn(run func(*fiber.Ctx) error) *AuthHandler_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthHandler creates a new instance of AuthHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthHandler {
	mock := &AuthHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
